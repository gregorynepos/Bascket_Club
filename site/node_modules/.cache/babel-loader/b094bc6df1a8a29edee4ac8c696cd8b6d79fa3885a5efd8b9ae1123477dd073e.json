{"ast":null,"code":"var _jsxFileName = \"/Users/gregmacbookpro/bascketclubA/bascketcluba/site/src/store/authContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\n\n//creations du context pour  l'authentification pour stocker les données : token,user.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultValue = {\n  token: \"\",\n  userId: null,\n  userIdLoggeIn: false,\n  login: () => {},\n  logout: () => {}\n};\nconst AuthContext = /*#__PURE__*/createContext(defaultValue);\n\n// le context provider pour enveloper app.js\nexport const AuthContextProvider = props => {\n  _s();\n  //stockage du token d'authentification\n  const [token, setToken] = useState(null);\n  const [userId, setuserId] = useState(null);\n  const [prenom, setPrenom] = useState(null);\n\n  //une fonction pour mettre à jour le token dans le state\n  const loginHandler = (token, userId, prenom) => {\n    setToken(token);\n    setuserId(userId);\n    setPrenom(prenom);\n  };\n\n  //pour se déconnecter (faire passer le token à null)\n  const logoutHandler = () => {\n    setToken(null);\n  };\n\n  //si il y a présence du token ça veut dire que je suis loggé\n  //convertir le token en valeur booleénne\n\n  const userIdLoggeIn = !!token;\n  console.log(\"-->userIdLoggeIn\");\n  console.log(userIdLoggeIn);\n  const contextValue = {\n    token: token,\n    userId: userId,\n    prenom: prenom,\n    isloggedin: userIdLoggeIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthContextProvider, \"bbKM/Vk8LINva1ZS2tFGOPO+h30=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["createContext","useState","jsxDEV","_jsxDEV","defaultValue","token","userId","userIdLoggeIn","login","logout","AuthContext","AuthContextProvider","props","_s","setToken","setuserId","prenom","setPrenom","loginHandler","logoutHandler","console","log","contextValue","isloggedin","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gregmacbookpro/bascketclubA/bascketcluba/site/src/store/authContext.js"],"sourcesContent":["import { createContext, useState } from \"react\";\r\n\r\n//creations du context pour  l'authentification pour stocker les données : token,user.\r\n\r\nconst defaultValue = {\r\n\r\n    token: \"\",\r\n    userId: null,\r\n    userIdLoggeIn: false,\r\n    login: () => { },\r\n    logout: () => { },\r\n}\r\n\r\nconst AuthContext = createContext(defaultValue);\r\n\r\n// le context provider pour enveloper app.js\r\nexport const AuthContextProvider = (props) => {\r\n    //stockage du token d'authentification\r\n    const [token, setToken] = useState(null);\r\n    const [userId, setuserId] = useState(null);\r\n    const [prenom, setPrenom] = useState(null);\r\n\r\n\r\n    //une fonction pour mettre à jour le token dans le state\r\n    const loginHandler = (token, userId, prenom) => {\r\n        setToken(token);\r\n        setuserId(userId);\r\n        setPrenom(prenom)\r\n    }\r\n\r\n    //pour se déconnecter (faire passer le token à null)\r\n    const logoutHandler = () => {\r\n        setToken(null)\r\n    }\r\n\r\n\r\n    //si il y a présence du token ça veut dire que je suis loggé\r\n    //convertir le token en valeur booleénne\r\n\r\n    const userIdLoggeIn = !!token;\r\n    console.log(\"-->userIdLoggeIn\");\r\n    console.log(userIdLoggeIn);\r\n\r\n    const contextValue = {\r\n        token: token,\r\n        userId: userId,\r\n        prenom: prenom,\r\n        isloggedin: userIdLoggeIn,\r\n        login: loginHandler,\r\n        logout: logoutHandler\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={contextValue}>\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AuthContext;\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;;AAE/C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,YAAY,GAAG;EAEjBC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE,IAAI;EACZC,aAAa,EAAE,KAAK;EACpBC,KAAK,EAAEA,CAAA,KAAM,CAAE,CAAC;EAChBC,MAAM,EAAEA,CAAA,KAAM,CAAE;AACpB,CAAC;AAED,MAAMC,WAAW,gBAAGV,aAAa,CAACI,YAAY,CAAC;;AAE/C;AACA,OAAO,MAAMO,mBAAmB,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC1C;EACA,MAAM,CAACR,KAAK,EAAES,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACK,MAAM,EAAES,SAAS,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACe,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;;EAG1C;EACA,MAAMiB,YAAY,GAAGA,CAACb,KAAK,EAAEC,MAAM,EAAEU,MAAM,KAAK;IAC5CF,QAAQ,CAACT,KAAK,CAAC;IACfU,SAAS,CAACT,MAAM,CAAC;IACjBW,SAAS,CAACD,MAAM,CAAC;EACrB,CAAC;;EAED;EACA,MAAMG,aAAa,GAAGA,CAAA,KAAM;IACxBL,QAAQ,CAAC,IAAI,CAAC;EAClB,CAAC;;EAGD;EACA;;EAEA,MAAMP,aAAa,GAAG,CAAC,CAACF,KAAK;EAC7Be,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;EAC/BD,OAAO,CAACC,GAAG,CAACd,aAAa,CAAC;EAE1B,MAAMe,YAAY,GAAG;IACjBjB,KAAK,EAAEA,KAAK;IACZC,MAAM,EAAEA,MAAM;IACdU,MAAM,EAAEA,MAAM;IACdO,UAAU,EAAEhB,aAAa;IACzBC,KAAK,EAAEU,YAAY;IACnBT,MAAM,EAAEU;EACZ,CAAC;EAED,oBACIhB,OAAA,CAACO,WAAW,CAACc,QAAQ;IAACC,KAAK,EAAEH,YAAa;IAAAI,QAAA,EACrCd,KAAK,CAACc;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAE/B,CAAC;AAAAjB,EAAA,CAzCYF,mBAAmB;AAAAoB,EAAA,GAAnBpB,mBAAmB;AA2ChC,eAAeD,WAAW;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}